import requests as r
from threading import Thread
import os
import uuid
import time
import random
import ipdb  # debugger
import datetime

# Evade ratelimits
import proxylist

with open("limiteds.txt", "r") as f:
    limiteds = f.read().replace(" ", "").split(",")

with open("cookie.txt", "r") as f:
    cookie = f.read().strip()

# Choose random proxy from list


def random_proxy():
    return {'http': random.choice(proxylist.ips)}


# Set up variables and get user id
proxy = random_proxy()

user_id = r.get(
    "https://users.roblox.com/v1/users/authenticated",
    cookies={".ROBLOSECURITY": cookie}
).json()["id"]

x_token = ""

# x-csrf-token


def get_x_token():
    global x_token

    x_token = r.post(
        "https://auth.roblox.com/v2/logout",
        cookies={".ROBLOSECURITY": cookie}
    ).headers["x-csrf-token"]

    print("Session started successfully")

    while 1:
        # Gets the x_token every 4 minutes.
        x_token = r.post(
            "https://auth.roblox.com/v2/logout",
            cookies={".ROBLOSECURITY": cookie}
        ).headers["x-csrf-token"]
        time.sleep(248)


# Purchase limited item
def buy(json, itemid, productid):
    print("Starting spamming purchase for the limited item...")

    data = {
        "collectibleItemId": itemid,
        "expectedCurrency": 1,
        "expectedPrice": 0,
        "expectedPurchaserId": user_id,
        "expectedPurchaserType": "User",
        "expectedSellerId": json["creatorTargetId"],
        "expectedSellerType": "User",
        "idempotencyKey": "ptenteromanoService",
        "collectibleProductId": productid,
        "bypassEnabled": True
    }

    while 1:
        # Post to try to purchase item
        data["idempotencyKey"] = str(uuid.uuid4())
        bought = r.post(
            f"https://apis.roblox.com/marketplace-sales/v1/item/{itemid}/purchase-item", json=data,
            headers={"x-csrf-token": x_token}, cookies={".ROBLOSECURITY": cookie}, proxies=proxy
        )

        # Slow down request
        if bought.reason == "Too Many Requests":
            print("An error has occurred with the request limit, trying again shortly...")
            time.sleep(0.5)
            continue

        try:
            bought = bought.json()
        except:
            print(bought.reason)
            print("Error decoding the JSON during the purchase of the item.")
            continue

        if not bought["purchased"]:
            print(
                f"\nFailed to purchase the limited item, please try again. - Info: {bought} - {data}\n"
            )
        else:
            print(
                f"The limited item was purchased successfully!! - Info: {bought} - {data}"
            )

        # Try to get the stock of the item (remaining units)
        info = r.post(
            "https://catalog.roblox.com/v1/catalog/items/details",
            json={
                "items": [{"itemType": "Asset", "id": int(limited)}]
            },
            headers={"x-csrf-token": x_token}, cookies={".ROBLOSECURITY": cookie}, proxies=proxy
        )

        try:
            left = info.json()["data"][0]["unitsAvailableForConsumption"]
        except:
            print(
                f"Failed to obtain the stock. - Full log: {info.text} - {info.reason}")
            left = 0

        if left == 0:
            print(
                "The limited item could not be purchased - stock depleted, better luck next time!"
            )
            return


# Get collectible and product id for all the limiteds.
Thread(target=get_x_token).start()

print("""██╗░░░██╗░██████╗░░█████╗░░█████╗░████████╗░█████╗░██╗░░██╗███████╗██████╗░
██║░░░██║██╔════╝░██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗██║░░██║██╔════╝██╔══██╗
██║░░░██║██║░░██╗░██║░░╚═╝███████║░░░██║░░░██║░░╚═╝███████║█████╗░░██████╔╝
██║░░░██║██║░░╚██╗██║░░██╗██╔══██║░░░██║░░░██║░░██╗██╔══██║██╔══╝░░██╔══██╗
╚██████╔╝╚██████╔╝╚█████╔╝██║░░██║░░░██║░░░╚█████╔╝██║░░██║███████╗██║░░██║
░╚═════╝░░╚═════╝░░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝
█░░ █▀▀ █▀▀ ▄▀█ █▀▀ █▄█
█▄▄ ██▄ █▄█ █▀█ █▄▄ ░█░

www.tenteromano.com\n\n""")
# os.system("pip install -update git+https://github.com/Furrycality/UGCatcher.git#egg=UGCatcher")
# os.system("start \"\" https://discord.gg/WDbrnWpjpd")

# Wait for the Token to be generated by the thread
while x_token == "":
    time.sleep(0.01)

# https://apis.roblox.com/marketplace-items/v1/items/details
# https://catalog.roblox.com/v1/catalog/items/details

# Run the program for all of the limiteds in the list
cooldown = 60/(39/len(limiteds))-0.8
while 1:
    for x in limiteds:
        print("\nLimited item with ID: " + x)
    start = time.perf_counter()
    print("\n")

    # Get the collectible and product id for all the limiteds
    for limited in limiteds:
        try:
            info = r.post(
                "https://catalog.roblox.com/v1/catalog/items/details",
                json={
                    "items": [{"itemType": "Asset", "id": int(limited)}]
                },
                headers={"x-csrf-token": x_token}, cookies={".ROBLOSECURITY": cookie}, proxies=proxy
            ).json()["data"][0]

        except KeyError:
            print("Ratelimited! Changing proxy server...")
            proxy = random_proxy()
            # time.sleep(3-int(datetime.datetime.now().second))
            continue

        if info.get("priceStatus", "") != "Off Sale" and info.get("collectibleItemId") is not None:
            productid = r.post(
                "https://apis.roblox.com/marketplace-items/v1/items/details",
                json={"itemIds": [info["collectibleItemId"]]},
                headers={"x-csrf-token": x_token}, cookies={".ROBLOSECURITY": cookie}, proxies=proxy
            )

            try:
                productid = productid.json()[0]["collectibleProductId"]
            except:
                print(
                    f"Something went wrong while fetching the item id. Logs: {productid.text} - {productid.reason}")
                continue

            # Attempt to buy a limited
            buy(info, info["collectibleItemId"], productid)

    taken = time.perf_counter()-start
    if taken < cooldown:
        time.sleep(cooldown-taken)

    os.system("cls")
    print("""
██╗░░░██╗░██████╗░░█████╗░░█████╗░████████╗░█████╗░██╗░░██╗███████╗██████╗░
██║░░░██║██╔════╝░██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗██║░░██║██╔════╝██╔══██╗
██║░░░██║██║░░██╗░██║░░╚═╝███████║░░░██║░░░██║░░╚═╝███████║█████╗░░██████╔╝
██║░░░██║██║░░╚██╗██║░░██╗██╔══██║░░░██║░░░██║░░██╗██╔══██║██╔══╝░░██╔══██╗
╚██████╔╝╚██████╔╝╚█████╔╝██║░░██║░░░██║░░░╚█████╔╝██║░░██║███████╗██║░░██║
░╚═════╝░░╚═════╝░░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝
█░░ █▀▀ █▀▀ ▄▀█ █▀▀ █▄█
█▄▄ ██▄ █▄█ █▀█ █▄▄ ░█░

Created by Furrycality™#1234 | Soporte: https://discord.gg/WDbrnWpjpd \n\n"""
          "Verifying limited item...\n"
          f"Time taken: {round(time.perf_counter()-start, 3)}\n"
          f"Time without delay: {round(cooldown, 3)}")
